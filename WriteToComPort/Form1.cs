using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using System;
using System.IO.Ports;
using System.Text;
using System.Diagnostics;

namespace WriteToComPort
{
    public partial class Form1 : Form
    {

        String standardPortName = "COM5";
        int standardBaudRate = 9600;
        bool isRunning = true;

    byte[] position, ids, msgStart, msgEnd, speed;
        byte[] sendData = new byte[64];
        int[] readData = new int[64];
//        #region position- and speed-list
//        int[] positionList0 = {311,
//314,
//317,
//320,
//323,
//326,
//329,
//333,
//336,
//339,
//342,
//345,
//348,
//351,
//354,
//357,
//360,
//363,
//366,
//369,
//373,
//376,
//379,
//382,
//385,
//388,
//391,
//394,
//397,
//400,
//403,
//406,
//408,
//411,
//414,
//417,
//420,
//423,
//426,
//429,
//432,
//435,
//437,
//440,
//443,
//446,
//449,
//451,
//454,
//457,
//460,
//462,
//465,
//468,
//470,
//473,
//476,
//478,
//481,
//484,
//486,
//489,
//491,
//494,
//496,
//499,
//501,
//504,
//506,
//508,
//511,
//513,
//515,
//518,
//520,
//522,
//525,
//527,
//529,
//531,
//533,
//536,
//538,
//540,
//542,
//544,
//546,
//548,
//550,
//552,
//554,
//556,
//558,
//560,
//561,
//563,
//565,
//567,
//569,
//570,
//572,
//574,
//575,
//577,
//578,
//580,
//582,
//583,
//585,
//586,
//587,
//589,
//590,
//592,
//593,
//594,
//595,
//597,
//598,
//599,
//600,
//601,
//602,
//603,
//604,
//605,
//606,
//607,
//608,
//609,
//610,
//611,
//611,
//612,
//613,
//614,
//614,
//615,
//616,
//616,
//617,
//617,
//618,
//618,
//619,
//619,
//619,
//620,
//620,
//620,
//620,
//621,
//621,
//621,
//621,
//621,
//621,
//621,
//621,
//621,
//621,
//621,
//621,
//621,
//620,
//620,
//620,
//620,
//619,
//619,
//619,
//618,
//618,
//617,
//617,
//616,
//616,
//615,
//614,
//614,
//613,
//612,
//612,
//611,
//610,
//609,
//608,
//607,
//606,
//606,
//605,
//604,
//602,
//601,
//600,
//599,
//598,
//597,
//596,
//594,
//593,
//592,
//590,
//589,
//588,
//586,
//585,
//583,
//582,
//580,
//579,
//577,
//576,
//574,
//572,
//571,
//569,
//567,
//565,
//564,
//562,
//560,
//558,
//556,
//554,
//552,
//550,
//548,
//546,
//544,
//542,
//540,
//538,
//536,
//534,
//532,
//529,
//527,
//525,
//523,
//520,
//518,
//516,
//514,
//511,
//509,
//506,
//504,
//502,
//499,
//497,
//494,
//492,
//489,
//486,
//484,
//481,
//479,
//476,
//473,
//471,
//468,
//465,
//463,
//460,
//457,
//455,
//452,
//449,
//446,
//443,
//441,
//438,
//435,
//432,
//429,
//426,
//424,
//421,
//418,
//415,
//412,
//409,
//406,
//403,
//400,
//397,
//394,
//391,
//388,
//385,
//382,
//379,
//376,
//373,
//370,
//367,
//364,
//361,
//358,
//355,
//352,
//348,
//345,
//342,
//339,
//336,
//333,
//330,
//327,
//324,
//321,
//318,
//314,
//311,
//308,
//305,
//302,
//299,
//296,
//293,
//290,
//287,
//283,
//280,
//277,
//274,
//271,
//268,
//265,
//262,
//259,
//256,
//253,
//250,
//247,
//244,
//241,
//238,
//235,
//232,
//229,
//226,
//223,
//220,
//217,
//214,
//211,
//208,
//205,
//202,
//199,
//196,
//193,
//190,
//188,
//185,
//182,
//179,
//176,
//174,
//171,
//168,
//165,
//162,
//160,
//157,
//154,
//152,
//149,
//146,
//144,
//141,
//139,
//136,
//133,
//131,
//128,
//126,
//123,
//121,
//119,
//116,
//114,
//111,
//109,
//107,
//104,
//102,
//100,
//97,
//95,
//93,
//91,
//89,
//86,
//84,
//82,
//80,
//78,
//76,
//74,
//72,
//70,
//68,
//66,
//64,
//62,
//61,
//59,
//57,
//55,
//53,
//52,
//50,
//48,
//47,
//45,
//43,
//42,
//40,
//39,
//37,
//36,
//34,
//33,
//32,
//30,
//29,
//28,
//27,
//25,
//24,
//23,
//22,
//21,
//20,
//19,
//17,
//16,
//16,
//15,
//14,
//13,
//12,
//11,
//10,
//10,
//9,
//8,
//7,
//7,
//6,
//6,
//5,
//5,
//4,
//4,
//3,
//3,
//2,
//2,
//2,
//2,
//1,
//1,
//1,
//1,
//1,
//1,
//1,
//1,
//1,
//1,
//1,
//1,
//1,
//1,
//1,
//1,
//2,
//2,
//2,
//3,
//3,
//3,
//4,
//4,
//5,
//5,
//6,
//7,
//7,
//8,
//9,
//9,
//10,
//11,
//12,
//12,
//13,
//14,
//15,
//16,
//17,
//18,
//19,
//20,
//21,
//22,
//24,
//25,
//26,
//27,
//28,
//30,
//31,
//32,
//34,
//35,
//37,
//38,
//40,
//41,
//43,
//44,
//46,
//48,
//49,
//51,
//53,
//54,
//56,
//58,
//60,
//61,
//63,
//65,
//67,
//69,
//71,
//73,
//75,
//77,
//79,
//81,
//83,
//85,
//88,
//90,
//92,
//94,
//96,
//99,
//101,
//103,
//105,
//108,
//110,
//113,
//115,
//117,
//120,
//122,
//125,
//127,
//130,
//132,
//135,
//137,
//140,
//143,
//145,
//148,
//150,
//153,
//156,
//158,
//161,
//164,
//167,
//169,
//172,
//175,
//178,
//181,
//183,
//186,
//189,
//192,
//195,
//198,
//201,
//204,
//206,
//209,
//212,
//215,
//218,
//221,
//224,
//227,
//230,
//233,
//236,
//239,
//242,
//245,
//248,
//251,
//254,
//257,
//260,
//263,
//267,
//270,
//273,
//276,
//279,
//282,
//285,
//288,
//291,
//294,
//297,
//301,
//304,
//307,
//310};

//        int[] speedList0 ={7,
//14,
//21,
//28,
//35,
//42,
//49,
//56,
//63,
//70,
//77,
//84,
//91,
//98,
//105,
//112,
//119,
//126,
//133,
//140,
//147,
//154,
//161,
//168,
//175,
//182,
//189,
//196,
//203,
//210,
//217,
//224,
//231,
//238,
//245,
//252,
//259,
//266,
//273,
//280,
//287,
//294,
//301,
//308,
//315,
//322,
//329,
//336,
//343,
//350,
//357,
//364,
//371,
//378,
//385,
//392,
//399,
//406,
//413,
//420,
//427,
//434,
//441,
//448,
//455,
//462,
//469,
//476,
//483,
//490,
//497,
//504,
//511,
//518,
//525,
//532,
//539,
//546,
//553,
//560,
//567,
//574,
//581,
//588,
//595,
//602,
//609,
//616,
//623,
//630,
//637,
//644,
//651,
//658,
//665,
//672,
//679,
//686,
//693,
//700,
//707,
//714,
//721,
//728,
//735,
//742,
//749,
//756,
//763,
//770,
//777,
//784,
//791,
//798,
//805,
//812,
//819,
//826,
//833,
//840,
//847,
//854,
//861,
//868,
//875,
//882,
//889,
//896,
//903,
//910,
//917,
//924,
//931,
//938,
//945,
//952,
//959,
//966,
//973,
//980,
//987,
//994,
//1001,
//1008,
//1015,
//1022,
//1029,
//1036,
//1043,
//1050,
//1057,
//1064,
//1071,
//1078,
//1085,
//1092,
//1099,
//1099,
//1092,
//1085,
//1078,
//1071,
//1064,
//1057,
//1050,
//1043,
//1036,
//1029,
//1022,
//1015,
//1008,
//1001,
//994,
//987,
//980,
//973,
//966,
//959,
//952,
//945,
//938,
//931,
//924,
//917,
//910,
//903,
//896,
//889,
//882,
//875,
//868,
//861,
//854,
//847,
//840,
//833,
//826,
//819,
//812,
//805,
//798,
//791,
//784,
//777,
//770,
//763,
//756,
//749,
//742,
//735,
//728,
//721,
//714,
//707,
//700,
//693,
//686,
//679,
//672,
//665,
//658,
//651,
//644,
//637,
//630,
//623,
//616,
//609,
//602,
//595,
//588,
//581,
//574,
//567,
//560,
//553,
//546,
//539,
//532,
//525,
//518,
//511,
//504,
//497,
//490,
//483,
//476,
//469,
//462,
//455,
//448,
//441,
//434,
//427,
//420,
//413,
//406,
//399,
//392,
//385,
//378,
//371,
//364,
//357,
//350,
//343,
//336,
//329,
//322,
//315,
//308,
//301,
//294,
//287,
//280,
//273,
//266,
//259,
//252,
//245,
//238,
//231,
//224,
//217,
//210,
//203,
//196,
//189,
//182,
//175,
//168,
//161,
//154,
//147,
//140,
//133,
//126,
//119,
//112,
//105,
//98,
//91,
//84,
//77,
//70,
//63,
//56,
//49,
//42,
//35,
//28,
//21,
//14,
//7,
//7,
//14,
//21,
//28,
//35,
//42,
//49,
//56,
//63,
//70,
//77,
//84,
//91,
//98,
//105,
//112,
//119,
//126,
//133,
//140,
//147,
//154,
//161,
//168,
//175,
//182,
//189,
//196,
//203,
//210,
//217,
//224,
//231,
//238,
//245,
//252,
//259,
//266,
//273,
//280,
//287,
//294,
//301,
//308,
//315,
//322,
//329,
//336,
//343,
//350,
//357,
//364,
//371,
//378,
//385,
//392,
//399,
//406,
//413,
//420,
//427,
//434,
//441,
//448,
//455,
//462,
//469,
//476,
//483,
//490,
//497,
//504,
//511,
//518,
//525,
//532,
//539,
//546,
//553,
//560,
//567,
//574,
//581,
//588,
//595,
//602,
//609,
//616,
//623,
//630,
//637,
//644,
//651,
//658,
//665,
//672,
//679,
//686,
//693,
//700,
//707,
//714,
//721,
//728,
//735,
//742,
//749,
//756,
//763,
//770,
//777,
//784,
//791,
//798,
//805,
//812,
//819,
//826,
//833,
//840,
//847,
//854,
//861,
//868,
//875,
//882,
//889,
//896,
//903,
//910,
//917,
//924,
//931,
//938,
//945,
//952,
//959,
//966,
//973,
//980,
//987,
//994,
//1001,
//1008,
//1015,
//1022,
//1029,
//1036,
//1043,
//1050,
//1057,
//1064,
//1071,
//1078,
//1085,
//1092,
//1099,
//1099,
//1092,
//1085,
//1078,
//1071,
//1064,
//1057,
//1050,
//1043,
//1036,
//1029,
//1022,
//1015,
//1008,
//1001,
//994,
//987,
//980,
//973,
//966,
//959,
//952,
//945,
//938,
//931,
//924,
//917,
//910,
//903,
//896,
//889,
//882,
//875,
//868,
//861,
//854,
//847,
//840,
//833,
//826,
//819,
//812,
//805,
//798,
//791,
//784,
//777,
//770,
//763,
//756,
//749,
//742,
//735,
//728,
//721,
//714,
//707,
//700,
//693,
//686,
//679,
//672,
//665,
//658,
//651,
//644,
//637,
//630,
//623,
//616,
//609,
//602,
//595,
//588,
//581,
//574,
//567,
//560,
//553,
//546,
//539,
//532,
//525,
//518,
//511,
//504,
//497,
//490,
//483,
//476,
//469,
//462,
//455,
//448,
//441,
//434,
//427,
//420,
//413,
//406,
//399,
//392,
//385,
//378,
//371,
//364,
//357,
//350,
//343,
//336,
//329,
//322,
//315,
//308,
//301,
//294,
//287,
//280,
//273,
//266,
//259,
//252,
//245,
//238,
//231,
//224,
//217,
//210,
//203,
//196,
//189,
//182,
//175,
//168,
//161,
//154,
//147,
//140,
//133,
//126,
//119,
//112,
//105,
//98,
//91,
//84,
//77,
//70,
//63,
//56,
//49,
//42,
//35,
//28,
//21,
//14,
//7,
//7};
//        #endregion

        int[] positionList0 = {311,
311,
311,
311,
311,
620,
620,
620,
620,
620,
};

        int[] speedList0 = {311,
311,
311,
311,
311,
620,
620,
620,
620,
620,
};

        SerialPort _serialPort;

        public Form1()
        {
            InitializeComponent();
            button4.Enabled = false;
            button1.Enabled = false;
            button1.Enabled = false;
            button2.Enabled = false;
            button5.Enabled = false;
            button6.Enabled = false;

            _serialPort = new SerialPort(standardPortName, standardBaudRate, Parity.None, 8, StopBits.One);
            _serialPort.Handshake = Handshake.None;
        }

        private void button_OpenPort_Click(object sender, System.EventArgs e)
        {
            //_serialPort.PortName = textBox_PortName.Text;
            _serialPort.Open();
            button3.Enabled = false;
            button4.Enabled = true;
            button1.Enabled = true;
            button2.Enabled = true;
            button5.Enabled = true;
            button6.Enabled = true;
            if ((_serialPort.IsOpen)) button1.Enabled = true;
        }

        private void button_ClosePort_Click(object sender, System.EventArgs e)
        {
            _serialPort.Close();
            button3.Enabled = true;
            button4.Enabled = false;

            button1.Enabled = false;
            button2.Enabled = false;
            button5.Enabled = false;
            button6.Enabled = false;
        }

        private void button_StartTest_Click(object sender, EventArgs e)
        {
            isRunning = true;

            int amount = Int32.Parse(textBox_repetitions.Text);
            for (int j = 0; j < amount; j++)
            {
                for (int i = 0; i < positionList0.Length; i++)
                {
                    if (isRunning)
                    {
                        setPosition(positionList0[i], speedList0[i]);
                        //Task.Delay(-1).Wait(10);
                    }
                    else break;
                }
                //Task.Delay(-1).Wait(500);
            }
        }

        private void button8_Click(object sender, EventArgs e)
        {
            isRunning = false;
        }

        private void button_TurnMotor_Click(object sender, EventArgs e)
        {
            int angle = Int32.Parse(textBox_motorAngle.Text);
            int speed = Int32.Parse(textBox_motorSpeed.Text);

            setPosition(angle, speed);
        }

        private void button_TurnRight_Click(object sender, System.EventArgs e)
        {
            setPosition(30, 100);
        }

        private void setPosition(int motorAngle, int motorSpeed)
        {
            textBox_information.Text = "Send next command";

            motorSpeed = 1023;
            try
            {
                if ((_serialPort.IsOpen))
                {
                    // Set start of message
                    msgStart = BitConverter.GetBytes(9999);
                    for (int i = 0; i < msgStart.Length; i++) sendData[i] = msgStart[i];

                    // Set ids
                    // Binär (i.e. 0000 0011 for motor 1 and 2)
                    ids = BitConverter.GetBytes((short)3);
                    for (int i = 0; i < ids.Length; i++) sendData[i + 4] = ids[i];

                    // Set speed
                    speed = BitConverter.GetBytes(motorSpeed);
                    for (int i = 0; i < speed.Length; i++) sendData[i + 8] = speed[i];

                    // Set position from database for dxl 1
                    position = BitConverter.GetBytes((short)motorAngle);
                    for (int i = 0; i < position.Length; i++) sendData[i + 12] = position[i];

                    // Set position from database for dxl 2
                    position = BitConverter.GetBytes((short)motorAngle);
                    for (int i = 0; i < position.Length; i++) sendData[i + 16] = position[i];

                    // Set end of message
                    msgEnd = BitConverter.GetBytes((short)8888);
                    for (int i = 0; i < msgEnd.Length; i++) sendData[i + 20] = msgEnd[i];


                    Debug.Write("Write to port" + "\n");
                    _serialPort.Write(sendData, 0, 64);

                    readPosition();
                }
                else Debug.Write("Not open" + "\n");
            }
            catch (Exception ex)
            {
                MessageBox.Show("Error opening/writing to serial port :: " + ex.Message, "Error!");
            }
        }

        private void readPosition()
        {
            int positionReached = 0;
            do {
                positionReached = _serialPort.ReadByte();
            } while (positionReached != 10);

            textBox_information.Text = "Position is reached";
        }

        private void button_TurnLeft_Click(object sender, System.EventArgs e)
        {
            setPosition(650, 100);
        }

        private void button_TurnMiddle_Click(object sender, System.EventArgs e)
        {
            setPosition(330, 100);
        }

    }
}
